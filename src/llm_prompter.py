import os
import pandas as pd
import polars as pl
from dotenv import load_dotenv
from utils.anomaly import AnomalyLabeler
import dspy
class LLMPrompter:
    def __init__(self):
        self.api_key = None
        try:
            load_dotenv()
            self.api_key = os.getenv("OPENROUTER_API_KEY")
        except:
            raise Exception("Failed to init OpenRouter API")

    def updateLM(self, new_lm):
        lm = dspy.LM(new_lm, self.api_key)
        dspy.configure(lm=lm)

    def loadLM(self, path="./utils/classifier_optimize.json"):
        loaded_dspy_program = dspy.ChainOfThought(AnomalyLabeler)
        loaded_dspy_program.load(path)

    def getExplanationResponses(self, df):
        #Gets the responses from the LLM for each prompt in the explanation prompts -column, and writes them into a new explanations-column
        pass

    def getLabelResponses(self, df, client_dspy=True):
        """
        Gets the labels from the LLM for each prompt in the anomaly_label column,
        and writes them into a new anomaly_result column.
        
        Parameters:
        - df (pl.DataFrame): Polars DataFrame containing an 'anomaly_label' column with prompts
                            (generated by PromptGenerator.generateLabelPrompts)
        - client_dspy (bool): Whether to use the DSPy model (True) or raw API calls (False)
        
        Returns:
        - df (pl.DataFrame): Updated DataFrame with a new 'anomaly_result' column containing the LLM responses
        """
        # Initialize the 'anomaly_result' column with null values
        df = df.with_columns(pl.lit(None).alias('anomaly_result'))
        
        # Valid label categories from AnomalyLabeler signature
        valid_labels = ['application', 'authentication', 'io', 'memory', 'network', 'other']
        
        # Load the DSPy model or configure a basic LM
        if client_dspy:
            self.loadLM()
            anomaly_labeler = dspy.ChainOfThought(AnomalyLabeler)
        else:
            # If not using DSPy, configure a basic LM
            model = "openrouter/anthropic/claude-3-sonnet-20240229"
            lm = dspy.LM(model, api_key=self.api_key)
            dspy.configure(lm=lm)
        
        # Filter rows that have a prompt in the anomaly_label column
        rows_with_prompts = df.filter(pl.col('anomaly_label').is_not_null())
        
        # Process each row with a prompt
        for row in rows_with_prompts.iter_rows(named=True):
            idx = row['LineId']
            prompt = row['anomaly_label']  # This already contains the properly formatted prompt
            
            try:
                if client_dspy:
                    # Use the DSPy model for prediction
                    prediction = anomaly_labeler(text=prompt) ## Fix this later
                    label = prediction.label
                else:
                    # Use the pre-generated prompt directly with the LM
                    response = lm(prompt)
                    
                    # Extract the label from the response
                    response_text = response.strip().lower()
                    # Find which valid label is mentioned in the response
                    label = next((l for l in valid_labels if l in response_text), 'other')
                
                # Update the DataFrame with the label
                df = df.with_columns(
                    pl.when(pl.col('LineId') == idx)
                    .then(pl.lit(label))
                    .otherwise(pl.col('anomaly_result'))
                    .alias('anomaly_result')
                )
            except Exception as e:
                print(f"Error processing LineId {idx}: {str(e)}")
                # Default to 'other' in case of errors
                df = df.with_columns(
                    pl.when(pl.col('LineId') == idx)
                    .then(pl.lit('other'))
                    .otherwise(pl.col('anomaly_result'))
                    .alias('anomaly_result')
                )
        
        return df
